using System;
using System.IO;
using System.Linq;
using PoViEmu.Core.Machine;
using PoViEmu.Expert;
using Xunit;

namespace PoViEmu.Tests
{
    public class InstrTest
    {
        [Theory]
        /*[InlineData(0x00, 0xFE)]
        [InlineData(0x01, 0xFE)]
        [InlineData(0x02, 0xFE)]
        [InlineData(0x03, 0xFE)]
        [InlineData(0x06)]
        [InlineData(0x07)]
        [InlineData(0x08, 0xFE)]
        [InlineData(0x09, 0xFE)]
        [InlineData(0x0A, 0xFE)]
        [InlineData(0x0B, 0xFE)]
        [InlineData(0x0E)]
        [InlineData(0x10, 0xFE)]
        [InlineData(0x11, 0xFE)]
        [InlineData(0x13, 0xFE)]
        [InlineData(0x16)]
        [InlineData(0x17)]
        [InlineData(0x18, 0xFE)]
        [InlineData(0x19, 0xFE)]
        [InlineData(0x1A, 0xFE)]
        [InlineData(0x1B, 0xFE)]
        [InlineData(0x1E)]
        [InlineData(0x1F)]
        [InlineData(0x20, 0xFE)]
        [InlineData(0x21, 0xFE)]
        [InlineData(0x22, 0xFE)]
        [InlineData(0x23, 0xFE)]
        [InlineData(0x27)]
        [InlineData(0x28, 0xFE)]
        [InlineData(0x29, 0xFE)]
        [InlineData(0x2B, 0xFE)]
        [InlineData(0x2F)]
        [InlineData(0x30, 0xFE)]
        [InlineData(0x31, 0xFE)]
        [InlineData(0x32, 0xFE)]
        [InlineData(0x33, 0xFE)]
        [InlineData(0x37)]
        [InlineData(0x38, 0xFE)]
        [InlineData(0x3F)]
        [InlineData(0x40)]
        [InlineData(0x41)]
        [InlineData(0x42)]
        [InlineData(0x43)]
        [InlineData(0x44)]
        [InlineData(0x45)]
        [InlineData(0x46)]
        [InlineData(0x47)]*/

        [InlineData(0x06, 0x07, 0x0E, 0x16, 0x17, 0x1E, 0x1F, 0x27, 0x2F, 0x3F, 0x40, 0x41)]
        [InlineData(0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D)]
        [InlineData(0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B)]
        [InlineData(0x5E, 0x5F, 0x60, 0x61, 0x6C, 0x6D, 0x6E, 0x6F, 0x90, 0x91, 0x92, 0x93)]
        [InlineData(0x96, 0x97, 0x98, 0x99, 0x9C, 0x9D, 0x9E, 0x9F, 0xA4, 0xA5, 0xA6, 0xA7)]
        [InlineData(0xAC, 0xAD, 0xAE, 0xAF, 0xC3, 0xC9, 0xCB, 0xCC, 0xCE, 0xCF, 0xD6, 0xD7)]
        [InlineData(0xEE, 0xEF, 0xF1, 0xF4, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xEC, 0xED)]
        [InlineData(0x4E, 0x4F, 0x94, 0x95, 0xAA, 0xAB, 0x5C, 0x5D)]

        [InlineData(0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05)]

        public void ShouldCheck(params int[] rawBytes)
        {
            var bytes = rawBytes.Select(b => (byte)b).ToArray();
            var expected = NasmTool.DisassembleNasm(bytes);
            var instr = new MemoryStream(bytes).Disassemble().ToArray();
            var mis = instr.Where(i => i.Bytes.Length != i.Size).ToArray();
            if (mis.Length >= 1)
                throw new InvalidOperationException($"{string.Join("|",
                    mis.Select(m => (m.Size, m.Bytes.Length)))} {mis.ToText()}");
            var actual = instr.ToText();
            TestTool.Compare(expected, actual);
        }
    }
}